function Write-ColoredLine {
param (
[string]$Text,
[ConsoleColor]$Color = 'White'
)
$oldColor = $Host.UI.RawUI.ForegroundColor
$Host.UI.RawUI.ForegroundColor = $Color
Write-Host $Text
$Host.UI.RawUI.ForegroundColor = $oldColor
}
function Wait-ForEnter {
Start-Sleep -Seconds 1
Write-Host "Press Enter to continue..." -ForegroundColor Yellow
while ($true) {
if ([System.Console]::KeyAvailable) {
$key = [System.Console]::ReadKey($true)
if ($key.Key -eq "Enter") { break }
}
Start-Sleep -Milliseconds 100
}
}
Clear-Host
Write-Host " _____            ______           ______      _          " -ForegroundColor Yellow
Write-Host "/  __ \           | ___ \          | ___ \    | |          " -ForegroundColor Yellow
Write-Host "| /  \/_ __ __ _  | |_/ /___  ___  | |_/ /   _| | ___  ___ " -ForegroundColor Yellow
Write-Host "| |   | '__/ _` | |    // _ \/ __| |    / | | | |/ _ \/ __|" -ForegroundColor Yellow
Write-Host "| \__/\ | | (_| | | |\ \  __/ (__  | |\ \ |_| | |  __/\__ \" -ForegroundColor Yellow
Write-Host " \____/_|  \__,_| \_| \_\___|\___| \_| \_\__,_|_|\___||___/" -ForegroundColor Yellow
Write-ColoredLine ""
Write-ColoredLine "=== Recording Rule Hub ===" Yellow
Write-ColoredLine "> Complete all steps with 100% success to pass." White
Write-ColoredLine "> Applications will download to C:\ToolsETA." White
Write-ColoredLine "> They auto-extract and apply per window." White
Write-ColoredLine "> If a prompt shows up, press OK to run the application." White
Write-ColoredLine "> The applications will automatically go full screen for you." White
Write-ColoredLine "> This PowerShell process currently has 6 steps." White
Write-ColoredLine "> Depending on your CPU, it might take longer to load." White
Write-Host ""
$cpu = Get-WmiObject Win32_Processor | Select-Object -First 1

if ($cpu.NumberOfCores -ge 4 -and $cpu.MaxClockSpeed -ge 2500) {
    Write-Host "Detected CPU: $($cpu.Name)" -ForegroundColor Green
    Write-Host "Your CPU looks good." -ForegroundColor Green
} else {
    Write-Host "Detected CPU: $($cpu.Name)" -ForegroundColor Red
    Write-Host "Your CPU isn't that strong. This process may take longer for you." -ForegroundColor Yellow
}
Write-ColoredLine ""
Write-ColoredLine "=== Discord Server ===" Yellow
Write-ColoredLine "discord.gg/craa" White
Write-ColoredLine "discord.gg/craa" White
Write-ColoredLine ""
Write-ColoredLine "=== Credits ===" Yellow
Write-ColoredLine "Made by @ravenader1" White
Write-ColoredLine "Made by @cyberthreats" White
Write-Host ""
Wait-ForEnter
Clear-Host

# ====== STEP 1: SYSTEM CHECK ====== 

Write-ColoredLine "Step 1: SYSTEM Check - by @cyberthreats" Cyan
Write-ColoredLine "INSTRUCTION: Reach 100% success" Yellow
Write-Host "" # Blank line above progress bar
for ($i = 0; $i -le 10; $i++) {
$percent = $i * 10
$bar = "#" * $i + "-" * (10 - $i)
$line = "Progress: [ $bar ] $percent%"
Write-Host -NoNewline "`r"
$oldColor = $Host.UI.RawUI.ForegroundColor
$Host.UI.RawUI.ForegroundColor = 'Blue'
Write-Host $line -NoNewline
$Host.UI.RawUI.ForegroundColor = $oldColor
Start-Sleep -Milliseconds 200
}
Write-Host ""
Write-Host ""
$exclusionsOutput = @()
$defenderOutput = @()
$modulesOutput = @()
$windowsOutput = @()
$memoryIntegrityOutput = @()
$threatsOutput = @()
$powershellSigOutput = @()
$defaultModules = @(
"Microsoft.PowerShell.Archive", "Microsoft.PowerShell.Diagnostics", "Microsoft.PowerShell.Host",
"Microsoft.PowerShell.LocalAccounts", "Microsoft.PowerShell.Management", "Microsoft.PowerShell.Security",
"Microsoft.PowerShell.Utility", "PackageManagement", "PowerShellGet", "PSReadLine", "Pester", "ThreadJob"
)
$protectedModule = "Microsoft.PowerShell.Operation.Validation"
$modulesPath = "C:\Program Files\WindowsPowerShell\Modules"
$deletedAny = $false
$protectedFilePath = "$modulesPath\$protectedModule\1.0.1\Diagnostics\Comprehensive\Comprehensive.Tests.ps1"
$expectedHash = "99B7CBE4325BA089DD9440A202B9E35D9E6F134A46312F3F1E93E71F23C8DAE3"
Get-ChildItem $modulesPath -ErrorAction SilentlyContinue | Where-Object { $_.PSIsContainer } | ForEach-Object {
$moduleName = $_.Name
$modulePath = $_.FullName
$isDefault = $defaultModules -contains $moduleName
$isProtected = $moduleName -eq $protectedModule
$files = Get-ChildItem $modulePath -Recurse -Force -ErrorAction SilentlyContinue | Where-Object { -not $_.PSIsContainer }
$unauthorizedFiles = @()
foreach ($file in $files) {
$sig = Get-AuthenticodeSignature $file.FullName
if ($sig.Status -ne 'Valid' -or $sig.SignerCertificate.Subject -notmatch "Microsoft") {
$unauthorizedFiles += $file
}
}
if (-not $isDefault -and -not $isProtected) {
foreach ($file in $files) { try { $file.Attributes = 'Normal' } catch {} }
try {
Remove-Item $modulePath -Recurse -Force -ErrorAction Stop
$modulesOutput += "FAILURE: Removed unauthorized module: $moduleName"
$deletedAny = $true
} catch {
$modulesOutput += "WARNING: Could not delete module '$moduleName'"
}
} elseif ($isProtected) {
if ($unauthorizedFiles.Count -eq 0) {
$modulesOutput += "SUCCESS: Protected module '$moduleName' verified."
} else {
foreach ($file in $unauthorizedFiles) {
if ($file.FullName -ieq $protectedFilePath) {
try {
$bytes = [System.IO.File]::ReadAllBytes($file.FullName)
$sha256 = [System.Security.Cryptography.SHA256]::Create()
$actual = $sha256.ComputeHash($bytes)
$hash = ([BitConverter]::ToString($actual)).Replace("-", "")
if ($hash -ne $expectedHash) {
$modulesOutput += "WARNING: Protected file altered: '$($file.FullName)'"
}
} catch {}
}
}
$modulesOutput += "SUCCESS: Protected module intact."
}
} else {
foreach ($file in $unauthorizedFiles) {
try {
$file.Attributes = 'Normal'
Remove-Item $file.FullName -Force -ErrorAction Stop
$modulesOutput += "FAILURE: Removed unauthorized file: '$($file.FullName)'"
$deletedAny = $true
} catch {
$modulesOutput += "WARNING: Could not delete file '$($file.FullName)'"
}
}
if ($unauthorizedFiles.Count -eq 0) {
$modulesOutput += "SUCCESS: Module '$moduleName' passed signature check."
}
}
}
Get-ChildItem $modulesPath -Force -ErrorAction SilentlyContinue | Where-Object { -not $_.PSIsContainer } | ForEach-Object {
$sig = Get-AuthenticodeSignature $_.FullName
if ($sig.Status -ne 'Valid' -or $sig.SignerCertificate.Subject -notmatch "Microsoft") {
try {
Remove-Item $_.FullName -Force
$modulesOutput += "FAILURE: Removed unsigned file: '$($_.FullName)'"
$deletedAny = $true
} catch {
$modulesOutput += "WARNING: Could not delete root file '$($_.FullName)'"
}
} else {
$modulesOutput += "SUCCESS: Root file '$($_.Name)' is signed."
}
}
if (-not $deletedAny) {
$modulesOutput += "SUCCESS: No unauthorized modules/files found."
}
try {
if ($env:OS -eq "Windows_NT" -and (Get-CimInstance Win32_OperatingSystem -ErrorAction Stop)) {
$windowsOutput += "SUCCESS: Running on Windows."
} else {
$windowsOutput += "FAILURE: Not running on Windows."
}
} catch {
$windowsOutput += "FAILURE: OS check failed."
}
try {
$regPath = "HKLM:\SYSTEM\CurrentControlSet\Control\DeviceGuard\Scenarios\HypervisorEnforcedCodeIntegrity"
$enabled = Get-ItemPropertyValue -Path $regPath -Name "Enabled" -ErrorAction Stop
$memoryIntegrityOutput += "SUCCESS: Memory Integrity supported."
if ($enabled -eq 1) {
$memoryIntegrityOutput += "SUCCESS: Memory Integrity is ON."
} else {
$memoryIntegrityOutput += "FAILURE: Memory Integrity is OFF."
}
} catch {
$memoryIntegrityOutput += "FAILURE: Memory Integrity not supported or inaccessible."
}
try {
$defender = Get-MpComputerStatus
if ($defender.AMServiceEnabled) {
if (-not $defender.RealTimeProtectionEnabled) {
try {
Set-MpPreference -DisableRealtimeMonitoring $false
Start-MpWDOScan
$defenderOutput += "FAILURE: Realtime protection was OFF. Enabling..."
} catch {
$defenderOutput += "WARNING: Could not re-enable Defender."
}
} else {
$defenderOutput += "SUCCESS: Realtime protection is ON."
}
} else {
$defenderOutput += "FAILURE: Defender is not running."
}
} catch {
$defenderOutput += "WARNING: Defender status unavailable."
}
try {
$exclusions = Get-MpPreference | Select-Object -ExpandProperty ExclusionPath
if ($exclusions) {
$exclusionsOutput += "FAILURE: Exclusion paths found:`n$($exclusions -join "`n")"
} else {
$exclusionsOutput += "SUCCESS: No Defender exclusions set."
}
} catch {
$exclusionsOutput += "WARNING: Could not check exclusions."
}
try {
$threats = Get-MpThreat | Where-Object { $_.Status -eq "Active" }
if ($threats) {
foreach ($t in $threats) {
$threatsOutput += "FAILURE: $($t.ThreatName) | $($t.Resources)"
}
} else {
$threatsOutput += "SUCCESS: No active threats."
}
} catch {
$threatsOutput += "WARNING: Threat scan failed."
}
try {
$psPath = "$env:SystemRoot\System32\WindowsPowerShell\v1.0\powershell.exe"
$sig = Get-AuthenticodeSignature -FilePath $psPath
if ($sig.Status -eq 'Valid' -and $sig.SignerCertificate.Subject -like '*Microsoft Windows*') {
$powershellSigOutput += "SUCCESS: PowerShell is signed and valid."
} else {
$powershellSigOutput += "FAILURE: PowerShell binary signature invalid."
}
} catch {
$powershellSigOutput += "WARNING: Could not verify PowerShell binary."
}
function Write-Section {
param([string]$Title, [string[]]$Lines)
Write-Host "--- $Title ---" -ForegroundColor White
foreach ($line in $Lines) {
if ($line -match "^SUCCESS") { Write-Host $line -ForegroundColor Green }
elseif ($line -match "^FAILURE") { Write-Host $line -ForegroundColor Red }
elseif ($line -match "^WARNING") { Write-Host $line -ForegroundColor Yellow }
else { Write-Host $line -ForegroundColor White }
}
}
Write-Section "Files + Modules" $modulesOutput
Write-Section "OS Check" $windowsOutput
Write-Section "Memory Integrity" $memoryIntegrityOutput
Write-Section "Windows Defender" $defenderOutput
Write-Section "Exclusions" $exclusionsOutput
Write-Section "Threats" $threatsOutput
Write-Section "Binary Sig" $powershellSigOutput
$allResults = $modulesOutput + $windowsOutput + $memoryIntegrityOutput + $defenderOutput + $exclusionsOutput + $threatsOutput + $powershellSigOutput
$total = ($allResults | Where-Object { $_ -match '^(SUCCESS|FAILURE|WARNING)' }).Count
$success = ($allResults | Where-Object { $_ -match '^SUCCESS' }).Count
$rate = if ($total -gt 0) { [math]::Round(($success / $total) * 100, 0) } else { 0 }
$rateColor = if ($rate -eq 100) { "Green" } else { "Red" }
Write-Host ""
Write-Host ("Success Rate: $rate% ($success / $total)") -ForegroundColor $rateColor
Wait-ForEnter
Clear-Host

# ====== STEP 2: PREFETCH CHECK ====== 
function Write-ColoredLine {
    param (
        [string]$Text,
        [ConsoleColor]$Color = 'White'
    )
    $oldColor = $Host.UI.RawUI.ForegroundColor
    $Host.UI.RawUI.ForegroundColor = $Color
    Write-Host $Text
    $Host.UI.RawUI.ForegroundColor = $oldColor
}

# ====== STEP 2: PREFETCH CHECK ====== 

Write-ColoredLine "Step 2: PREFETCH Check - by @cyberthreats" Cyan
Write-ColoredLine "INSTRUCTION: Slowly scroll to the very bottom, then close the window" Yellow

# Blue Loading Bar
function Show-LoadingBar {
    Write-Host "" # Blank line above progress bar
    for ($i = 0; $i -le 10; $i++) {
        $percent = $i * 10
        $bar = "#" * $i + "-" * (10 - $i)
        $line = "Progress: [ $bar ] $percent%"
        Write-Host -NoNewline "`r"
        $oldColor = $Host.UI.RawUI.ForegroundColor
        $Host.UI.RawUI.ForegroundColor = 'Blue'
        Write-Host $line -NoNewline
        $Host.UI.RawUI.ForegroundColor = $oldColor
        Start-Sleep -Milliseconds 200
    }
    Write-Host ""
    Write-Host ""
}
Show-LoadingBar

Write-Host "Prefetcher check completed." -ForegroundColor Green

$regPath = "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PrefetchParameters"
$successCounter = 0
$totalSteps = 2

function Ensure-PrefetcherEnabled {
    try {
        $currentValue = Get-ItemPropertyValue -Path $regPath -Name EnablePrefetcher -ErrorAction Stop
        if ($currentValue -ne 3) {
            Set-ItemProperty -Path $regPath -Name EnablePrefetcher -Value 3 -ErrorAction Stop
            Write-Host "Prefetcher has been enabled." -ForegroundColor Green
        } else {
            Write-Host "Prefetcher is already enabled." -ForegroundColor Green
        }
        $GLOBAL:successCounter++
    } catch {
        Write-Host "Error: Unable to access or modify Prefetcher registry setting." -ForegroundColor Red
    }
}
Ensure-PrefetcherEnabled

function Show-PrefetchFilesViaShell {
    $prefetchDir = "C:\Windows\Prefetch"
    try {
        $items = Get-ChildItem -Path $prefetchDir -Filter *.pf -ErrorAction Stop
        if ($items.Count -eq 0) {
            Write-Host "No prefetch files found in $prefetchDir." -ForegroundColor Red
            return
        }

        Add-Type -AssemblyName System.Windows.Forms
        Add-Type -AssemblyName System.Drawing
        $form = New-Object System.Windows.Forms.Form
        $form.Text = "Prefetch Viewer"
        $form.WindowState = 'Maximized'
        $form.MinimumSize = New-Object System.Drawing.Size(800, 600)
        $form.StartPosition = "CenterScreen"
        $form.BackColor = [System.Drawing.Color]::White
        $form.Topmost = $true
        $form.FormBorderStyle = 'Sizable'

        $dgv = New-Object System.Windows.Forms.DataGridView
        $dgv.Dock = 'Fill'
        $dgv.ReadOnly = $true
        $dgv.BackgroundColor = [System.Drawing.Color]::White
        $dgv.DefaultCellStyle.ForeColor = [System.Drawing.Color]::Black
        $dgv.ColumnHeadersDefaultCellStyle.ForeColor = [System.Drawing.Color]::Black
        $dgv.ColumnHeadersDefaultCellStyle.BackColor = [System.Drawing.Color]::LightGray
        $dgv.EnableHeadersVisualStyles = $false
        $dgv.AutoSizeColumnsMode = 'AllCells'
        $form.Controls.Add($dgv)

        $table = New-Object System.Data.DataTable
        $table.Columns.Add("FileName", [string]) | Out-Null
        $table.Columns.Add("Size (KB)", [double]) | Out-Null
        $table.Columns.Add("LastWriteTime", [datetime]) | Out-Null

        foreach ($file in $items) {
            $row = $table.NewRow()
            $row["FileName"] = $file.Name
            $row["Size (KB)"] = [math]::Round($file.Length / 1KB, 2)
            $row["LastWriteTime"] = $file.LastWriteTime
            $table.Rows.Add($row)
        }

        $dgv.DataSource = $table
        $form.Add_Shown({ $form.Activate() })
        $GLOBAL:successCounter++
        [void]$form.ShowDialog()
    } catch {
        Write-Host "Failed to list Prefetch files: $_" -ForegroundColor Red
    }
}
Show-PrefetchFilesViaShell

# Show Success Rate
$rate = [math]::Round(($successCounter / $totalSteps) * 100, 0)
$rateColor = if ($rate -eq 100) { "Green" } else { "Red" }
Write-Host ""
Write-Host ("Success Rate: $rate% ($successCounter / $totalSteps)") -ForegroundColor $rateColor

# Wait for Enter
function Wait-ForEnter {
 
    Write-ColoredLine "Press Enter to continue..." Yellow 
    [void][System.Console]::ReadLine()
}
Wait-ForEnter
Clear-Host


# ====== STEP 3: BAM ENTRIES CHECK ======

$ErrorActionPreference = "SilentlyContinue"

Add-Type @"
using System;
using System.Runtime.InteropServices;
using System.Diagnostics;
public class Win32 {
    [DllImport("user32.dll", SetLastError = true)]
    public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

    [DllImport("user32.dll", SetLastError = true)]
    public static extern bool SetForegroundWindow(IntPtr hWnd);

    [DllImport("user32.dll", SetLastError = true)]
    public static extern bool IsWindowVisible(IntPtr hWnd);
}
"@

function Maximize-GridView {
    $title = "BAM key entries"
    Start-Sleep -Milliseconds 200
    $sw = Get-Process | Where-Object { $_.MainWindowTitle -like "$title*" }
    foreach ($proc in $sw) {
        if ($proc.MainWindowHandle -ne 0) {
            [Win32]::ShowWindow($proc.MainWindowHandle, 3) | Out-Null
            [Win32]::SetForegroundWindow($proc.MainWindowHandle) | Out-Null
        }
    }
}

function Write-ColoredLine {
    param (
        [string]$Text,
        [ConsoleColor]$Color = 'White'
    )
    $oldColor = $Host.UI.RawUI.ForegroundColor
    $Host.UI.RawUI.ForegroundColor = $Color
    Write-Host $Text
    $Host.UI.RawUI.ForegroundColor = $oldColor
}

function Wait-ForEnter {
    Start-Sleep -Seconds 1
    Write-Host "Press Enter to continue..." -ForegroundColor Yellow
    while ($true) {
        if ([System.Console]::KeyAvailable) {
            $key = [System.Console]::ReadKey($true)
            if ($key.Key -eq "Enter") { break }
        }
        Start-Sleep -Milliseconds 100
    }
}

function Show-ProgressBar {
    foreach ($i in 0..9) {
        $percent = $i * 10
        $bar = ("#" * $i).PadRight(10, "-")
        Write-Host "`rProgress: [ $bar ] $percent% " -ForegroundColor Blue -NoNewline
        Start-Sleep -Milliseconds 200
    }

    $bar = ("#" * 9).PadRight(10, "-")
    Write-Host "`rProgress: [ $bar ] 99% " -ForegroundColor Blue -NoNewline
}

Clear-Host

Write-ColoredLine "Step 3: BAM Entries - by @cyberthreats" Cyan
Write-ColoredLine "INSTRUCTION: Slowly scroll to the very bottom, then close the window" Yellow 
Write-Host ""

Show-ProgressBar

function Test-Admin {
    $currentUser = New-Object Security.Principal.WindowsPrincipal $([Security.Principal.WindowsIdentity]::GetCurrent())
    $currentUser.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
}

if (!(Test-Admin)) {
    Write-Warning "Please Run This Script as Admin."
    Start-Sleep 10
    Exit
}

if (!(Get-PSDrive -Name HKLM -PSProvider Registry)) {
    Try { New-PSDrive -Name HKLM -PSProvider Registry -Root HKEY_LOCAL_MACHINE }
    Catch { Write-Warning "Error Mounting HKEY_Local_Machine" }
}

$bv = ("bam", "bam\State")
Try {
    $Users = foreach ($ii in $bv) {
        Get-ChildItem -Path "HKLM:\SYSTEM\CurrentControlSet\Services\$($ii)\UserSettings\" | Select-Object -ExpandProperty PSChildName
    }
} Catch {
    Write-Warning "Error Parsing BAM Key. Likely unsupported Windows Version"
    Exit
}

$rpath = @("HKLM:\SYSTEM\CurrentControlSet\Services\bam\", "HKLM:\SYSTEM\CurrentControlSet\Services\bam\state\")
$UserTime = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").TimeZoneKeyName
$UserBias = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").ActiveTimeBias
$UserDay = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").DaylightBias

function Get-Signature {
    param ([string[]]$FilePath)
    $Existence = Test-Path -PathType "Leaf" -Path $FilePath
    $Authenticode = (Get-AuthenticodeSignature -FilePath $FilePath -ErrorAction SilentlyContinue).Status
    if ($Existence) {
        switch ($Authenticode) {
            "Valid"       { return "Valid Signature" }
            "NotSigned"   { return "Invalid Signature (NotSigned)" }
            "HashMismatch"{ return "Invalid Signature (HashMismatch)" }
            "NotTrusted"  { return "Invalid Signature (NotTrusted)" }
            default       { return "Invalid Signature (UnknownError)" }
        }
    } else {
        return "File Was Not Found"
    }
}

$Bam = foreach ($Sid in $Users) {
    foreach ($rp in $rpath) {
        $BamItems = Get-Item -Path "$($rp)UserSettings\$Sid" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty Property
        Try {
            $objSID = New-Object System.Security.Principal.SecurityIdentifier($Sid)
            $User = $objSID.Translate([System.Security.Principal.NTAccount]).Value
        } Catch {
            $User = ""
        }

        foreach ($Item in $BamItems) {
            $Key = Get-ItemProperty -Path "$($rp)UserSettings\$Sid" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty $Item
            if ($Key.length -eq 24) {
                $Hex = [System.BitConverter]::ToString($Key[7..0]) -replace "-", ""
                $TimeLocal = Get-Date ([DateTime]::FromFileTime([Convert]::ToInt64($Hex, 16))) -Format "yyyy-MM-dd HH:mm:ss"
                $TimeUTC   = Get-Date ([DateTime]::FromFileTimeUtc([Convert]::ToInt64($Hex, 16))) -Format "yyyy-MM-dd HH:mm:ss"
                $TimeUser  = (Get-Date ([DateTime]::FromFileTimeUtc([Convert]::ToInt64($Hex, 16))).AddMinutes($UserBias) -Format "yyyy-MM-dd HH:mm:ss")

                $f = Split-Path -Leaf $Item

                if ($Item -match '^\\Device\\HarddiskVolume\d+\\(.+)$') {
                    $relativePath = $matches[1]
                    $path = Join-Path -Path "C:\" -ChildPath $relativePath
                    $sig = Get-Signature -FilePath $path
                } else {
                    $path = ""
                    $sig = ""
                }

                [PSCustomObject]@{
                    'Examiner Time'             = $TimeLocal
                    'Last Execution Time (UTC)' = $TimeUTC
                    'Last Execution User Time'  = $TimeUser
                    Application                 = $f
                    Path                        = $path
                    Signature                   = $sig
                    User                        = $User
                    SID                         = $Sid
                    Regpath                     = $rp
                }
            }
        }
    }
}

Write-Host "`rProgress: [ ########## ] 100% " -ForegroundColor Blue

Start-Job {
    Start-Sleep -Milliseconds 400
    powershell -Command {
        Add-Type @"
        using System;
        using System.Runtime.InteropServices;
        public class Win32 {
            [DllImport("user32.dll")]
            public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
            [DllImport("user32.dll")]
            public static extern bool SetForegroundWindow(IntPtr hWnd);
        }
"@
        $procs = Get-Process | Where-Object { $_.MainWindowTitle -like "BAM key entries*" }
        foreach ($p in $procs) {
            [Win32]::ShowWindow($p.MainWindowHandle, 3) | Out-Null
            [Win32]::SetForegroundWindow($p.MainWindowHandle) | Out-Null
        }
    }
} | Out-Null

$Bam | Out-GridView -PassThru -Title "BAM key entries $($Bam.count)  - User TimeZone: ($UserTime) -> ActiveBias: ($UserBias) - DayLightTime: ($UserDay)"

$success = if ($Bam.Count -gt 0) { $true } else { $false }

Write-Host ""
if ($success) {
    Write-ColoredLine "BAM Entries successful!" Green
    $successCounter = 1
} else {
    Write-ColoredLine "BAM Entries failed!" Red
    $successCounter = 0
}

$totalSteps = 1
$rate = [math]::Round(($successCounter / $totalSteps) * 100, 0)
$rateColor = if ($rate -eq 100) { "Green" } else { "Red" }

Write-Host ""
Write-Host ("Success Rate: $rate% ($successCounter / $totalSteps)") -ForegroundColor $rateColor

Wait-ForEnter
Clear-Host

# ===== Utility Functions =====

function Write-ColoredLine {
    param (
        [string]$Text,
        [ConsoleColor]$Color = 'White'
    )
    $oldColor = $Host.UI.RawUI.ForegroundColor
    $Host.UI.RawUI.ForegroundColor = $Color
    Write-Host $Text
    $Host.UI.RawUI.ForegroundColor = $oldColor
}

function Wait-ForEnter {
    param (
        [string]$PromptMessage = "Press Enter to continue..."
    )
    Start-Sleep -Seconds 1
    Write-ColoredLine $PromptMessage Yellow
    while ($true) {
        if ([System.Console]::KeyAvailable) {
            $key = [System.Console]::ReadKey($true)
            if ($key.Key -eq "Enter") { break }
        }
        Start-Sleep -Milliseconds 100
    }
}

function Clean-Folder {
    param (
        [string]$Path
    )
    if (Test-Path $Path) {
        Write-ColoredLine "Clearing all contents inside $Path..." White
        Get-ChildItem -Path $Path -Force -Recurse | ForEach-Object {
            try {
                $_.Attributes = 'Normal'
                Remove-Item -LiteralPath $_.FullName -Recurse -Force -ErrorAction Stop
            }
            catch {
                Write-ColoredLine "[INFO] Skipped: $($_.FullName): $($_.Exception.Message)" White
            }
        }
        Write-ColoredLine "[SUCCESS] Cleared contents of $Path." Green
    } else {
        try {
            New-Item -ItemType Directory -Path $Path -ErrorAction Stop | Out-Null
            Write-ColoredLine "[SUCCESS] Created folder $Path." Green
        } catch {
            Write-ColoredLine ("[FAILED] Could not create folder " + $Path + ": " + $_.Exception.Message) Red
            exit 1
        }
    }
}

function Show-LoadingBar {
    for ($i = 0; $i -le 10; $i++) {
        $percent = $i * 10
        $bar = "#" * $i + "-" * (10 - $i)
        Write-Host -NoNewline "`rProgress: [ $bar ] $percent% " -ForegroundColor Blue
        Start-Sleep -Milliseconds 200
    }
    Write-Host "`n"
}

# Import WinAPI DLL function once for all steps
Add-Type @"
using System;
using System.Runtime.InteropServices;
public class WinAPI {
    [DllImport("user32.dll")]
    public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
}
"@

$SW_MAXIMIZE = 3

Clear-Host

# ===== STEP 4: AUTORUN CHECK =====

Write-ColoredLine "Step 4: Autorun Check - by @ravenader1" Cyan
Write-ColoredLine "INSTRUCTION: Wait for the bottom left text to say 'Ready', scroll slowly down, then close the window when finished." Yellow
Write-Host ""

$baseFolder = "C:\ToolsETA"
$extractFolder = Join-Path $baseFolder "Autoruns"
$zipUrl = "https://download.sysinternals.com/files/Autoruns.zip"
$zipPath = Join-Path $baseFolder "Autoruns.zip"

# Ensure base folder exists and is empty
if (Test-Path $baseFolder) {
    Write-ColoredLine "[INFO] Folder $baseFolder exists, clearing all contents..." White
    Get-ChildItem -Path $baseFolder -Force -Recurse | ForEach-Object {
        try {
            $_.Attributes = 'Normal'
            Remove-Item -LiteralPath $_.FullName -Recurse -Force -ErrorAction Stop
        } catch {
            Write-ColoredLine "[INFO] Skipped: $($_.FullName): $($_.Exception.Message)" White
        }
    }
    Write-ColoredLine "[SUCCESS] Cleared contents of $baseFolder." Green
} else {
    Write-ColoredLine "[INFO] Folder $baseFolder does not exist, creating folder..." White
    try {
        New-Item -ItemType Directory -Path $baseFolder -ErrorAction Stop | Out-Null
        Write-ColoredLine "[SUCCESS] Created folder $baseFolder." Green
    } catch {
        Write-ColoredLine ("[FAILED] Could not create folder " + $baseFolder + ": " + $_.Exception.Message) Red
        exit 1
    }
}

try {
    Write-ColoredLine "[INFO] Downloading Autoruns..." White
    Invoke-WebRequest -Uri $zipUrl -OutFile $zipPath -UseBasicParsing -ErrorAction Stop
    Write-ColoredLine "[SUCCESS] Download completed." Green
} catch {
    Write-ColoredLine "[FAILED] Download failed: $($_.Exception.Message)" Red
    exit 1
}

try {
    Add-Type -AssemblyName System.IO.Compression.FileSystem
    [System.IO.Compression.ZipFile]::ExtractToDirectory($zipPath, $extractFolder)
    Write-ColoredLine "[SUCCESS] Extraction completed." Green
    Remove-Item $zipPath -Force
} catch {
    Write-ColoredLine "[FAILED] Extraction failed: $($_.Exception.Message)" Red
    exit 1
}

$actualExe = Get-ChildItem -Path $extractFolder -Filter "Autoruns.exe" -Recurse | Where-Object {
    $_.FullName -notmatch "64|cmd"
} | Select-Object -First 1

if (-not $actualExe) {
    Write-ColoredLine "[FAILED] Autoruns.exe not found after extraction." Red
    exit 1
} else {
    Write-ColoredLine "[SUCCESS] Autoruns.exe found at: $($actualExe.FullName)" Green
}

$runningAutoruns = Get-Process -Name "autoruns" -ErrorAction SilentlyContinue
if ($runningAutoruns) {
    Write-ColoredLine "[INFO] Found running Autoruns.exe processes, terminating..." Yellow
    $runningAutoruns | Stop-Process -Force
    Start-Sleep -Seconds 2
    Write-ColoredLine "[SUCCESS] All Autoruns.exe processes terminated." Green
}

try {
    $process = Start-Process -FilePath $actualExe.FullName -PassThru
    Write-ColoredLine "[SUCCESS] Autoruns launched." Green
} catch {
    Write-ColoredLine "[FAILED] Failed to launch Autoruns.exe: $($_.Exception.Message)" Red
    exit 1
}

# Maximize window
$hwnd = $null
for ($i = 0; $i -lt 10; $i++) {
    $process.Refresh()
    $hwnd = $process.MainWindowHandle
    if ($hwnd -ne 0) { break }
    Start-Sleep -Milliseconds 500
}

if ($hwnd -and $hwnd -ne 0) {
    [WinAPI]::ShowWindow($hwnd, $SW_MAXIMIZE) | Out-Null
    Write-ColoredLine "[SUCCESS] Autoruns window maximized." Green
} else {
    Write-ColoredLine "[FAILED] Could not maximize Autoruns window." Red
}

Write-ColoredLine "`nWaiting for Autoruns window to close..." Yellow
while (!$process.HasExited) { Start-Sleep -Seconds 1 }

Write-ColoredLine "[SUCCESS] Success Rate: 100% (1 / 1)" Green
Wait-ForEnter -PromptMessage "Press Enter to continue."

Clear-Host

# ===== STEP 5: WINOBJ CHECK =====

Write-ColoredLine "Step 5: WinObj Check - by @ravenader1" Cyan
Write-ColoredLine "INSTRUCTION: Navigate to Sessions > 0 > Dos Devices > Click on every folder, then close the window." Yellow
Write-Host ""

Show-LoadingBar

$extractFolder = Join-Path $baseFolder "WinObj"
$zipUrl = "https://download.sysinternals.com/files/WinObj.zip"
$zipPath = Join-Path $baseFolder "WinObj.zip"

# Kill running WinObj if any
$runningWinObj = Get-Process -Name "winobj" -ErrorAction SilentlyContinue
if ($runningWinObj) {
    Write-ColoredLine "[INFO] Found running WinObj.exe process(es), terminating..." Yellow
    $runningWinObj | Stop-Process -Force
    Write-ColoredLine "[SUCCESS] WinObj.exe processes terminated." Green
}

Clean-Folder -Path $baseFolder

Write-ColoredLine "[INFO] Downloading WinObj..." White
Invoke-WebRequest -Uri $zipUrl -OutFile $zipPath -UseBasicParsing -ErrorAction Stop

Write-ColoredLine "[INFO] Extracting WinObj..." White
Add-Type -AssemblyName System.IO.Compression.FileSystem
[System.IO.Compression.ZipFile]::ExtractToDirectory($zipPath, $extractFolder)
Remove-Item $zipPath -Force

$actualExe = Get-ChildItem -Path $extractFolder -Filter "WinObj.exe" -Recurse | Where-Object {
    $_.FullName -notmatch "64|cmd"
} | Select-Object -First 1

if ($actualExe) {
    try {
        $process = Start-Process -FilePath $actualExe.FullName -PassThru
        # Maximize window
        $hwnd = $null
        for ($i = 0; $i -lt 10; $i++) {
            $process.Refresh()
            $hwnd = $process.MainWindowHandle
            if ($hwnd -ne 0) { break }
            Start-Sleep -Milliseconds 500
        }
        if ($hwnd -and $hwnd -ne 0) {
            [WinAPI]::ShowWindow($hwnd, $SW_MAXIMIZE) | Out-Null
            Write-ColoredLine "[SUCCESS] WinObj launched and maximized." Green
        } else {
            Write-ColoredLine "[FAILED] Could not maximize WinObj window." Red
        }
        $process.WaitForExit()
        Write-ColoredLine "[SUCCESS] Success Rate: 100% (1 / 1)" Green
    } catch {
        Write-ColoredLine ("[FAILED] Failed to launch WinObj.exe: " + $_.Exception.Message) Red
        Write-ColoredLine "[SUCCESS] Success Rate: 0% (0 / 1)" Red
    }
} else {
    Write-ColoredLine "[FAILED] WinObj.exe not found." Red
    Write-ColoredLine "[SUCCESS] Success Rate: 0% (0 / 1)" Red
}

Wait-ForEnter -PromptMessage "Press Enter to continue."
Clear-Host

# ===== STEP 6: PROCESS EXPLORER =====

Write-ColoredLine "Step 6: Process Explorer - by @ravenader1" Cyan
Write-ColoredLine "INSTRUCTION: Wait for Process Explorer to open. Scroll to the bottom, then close the window." Yellow
Write-Host ""

Show-LoadingBar

$extractFolder = Join-Path $baseFolder "ProcessExplorer"
$zipUrl = "https://download.sysinternals.com/files/ProcessExplorer.zip"
$zipPath = Join-Path $baseFolder "ProcessExplorer.zip"
$regFileUrl = "https://pastebin.com/raw/gse8NxwU"
$regFilePath = Join-Path $baseFolder "procexp_config.reg"

$processNames = @("procexp32", "procexp64", "procexp64a")
$runningPE = Get-Process -ErrorAction SilentlyContinue | Where-Object { $processNames -contains $_.ProcessName.ToLower() }

if ($runningPE) {
    Write-ColoredLine "[INFO] Terminating Process Explorer processes..." Yellow
    foreach ($proc in $runningPE) {
        try {
            $proc | Stop-Process -Force -ErrorAction Stop
            Write-ColoredLine "[SUCCESS] • Terminated process ID $($proc.Id)" Green
        } catch {
            Write-ColoredLine "[FAILED] • Failed to terminate process ID $($proc.Id): $($_.Exception.Message)" Red
        }
    }
} else {
    Write-ColoredLine "[SUCCESS] No running Process Explorer processes found." Green
}

Clean-Folder -Path $baseFolder

try {
    Invoke-WebRequest -Uri $zipUrl -OutFile $zipPath -UseBasicParsing -ErrorAction Stop
    Write-ColoredLine "[SUCCESS] Downloaded Process Explorer." Green
} catch {
    Write-ColoredLine "[FAILED] Failed to download Process Explorer: $($_.Exception.Message)" Red
    exit
}

try {
    [System.IO.Compression.ZipFile]::ExtractToDirectory($zipPath, $extractFolder)
    Write-ColoredLine "[SUCCESS] Extracted Process Explorer." Green
} catch {
    Write-ColoredLine "[INFO] Files may already exist." White
}
Remove-Item $zipPath -Force -ErrorAction SilentlyContinue

try {
    Invoke-WebRequest -Uri $regFileUrl -OutFile $regFilePath -UseBasicParsing -ErrorAction Stop
    Write-ColoredLine "[SUCCESS] Downloaded Process Explorer registry config." Green
} catch {
    Write-ColoredLine "[FAILED] Could not download registry config: $($_.Exception.Message)" Red
    exit
}

try {
    Start-Process -FilePath "reg.exe" -ArgumentList "import `"$regFilePath`"" -NoNewWindow -Wait -ErrorAction Stop
    Write-ColoredLine "[SUCCESS] Registry configuration imported." Green
} catch {
    Write-ColoredLine "[FAILED] Registry import failed: $($_.Exception.Message)" Red
    exit
}

$actualExe = Get-ChildItem -Path $extractFolder -Filter "procexp64.exe" -Recurse | Select-Object -First 1
if ($actualExe) {
    try {
        $process = Start-Process -FilePath $actualExe.FullName -PassThru
        # Maximize window
        $hwnd = $null
        for ($i = 0; $i -lt 10; $i++) {
            $process.Refresh()
            $hwnd = $process.MainWindowHandle
            if ($hwnd -ne 0) { break }
            Start-Sleep -Milliseconds 500
        }
        if ($hwnd -and $hwnd -ne 0) {
            [WinAPI]::ShowWindow($hwnd, $SW_MAXIMIZE) | Out-Null
            Write-ColoredLine "[SUCCESS] Process Explorer launched and maximized." Green
        } else {
            Write-ColoredLine "[FAILED] Could not maximize Process Explorer window." Red
        }
        $process.WaitForExit()
        Write-ColoredLine "[SUCCESS] Success Rate: 100% (1 / 1)" Green
    } catch {
        Write-ColoredLine ("[FAILED] Failed to launch Process Explorer: " + $_.Exception.Message) Red
        Write-ColoredLine "[SUCCESS] Success Rate: 0% (0 / 1)" Red
    }
} else {
    Write-ColoredLine "[FAILED] procexp64.exe not found." Red
    Write-ColoredLine "[SUCCESS] Success Rate: 0% (0 / 1)" Red
}

Wait-ForEnter -PromptMessage "Press Enter to exit."
exit
